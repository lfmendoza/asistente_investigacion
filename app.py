"""
Aplicaci√≥n Streamlit para asistente de investigaci√≥n digital.
"""
import os
import streamlit as st
from dotenv import load_dotenv
import time

# Cargar variables de entorno
load_dotenv()

# Importar m√≥dulos personalizados
from modulos.buscador import realizar_busqueda, obtener_texto_completo
from modulos.procesador import generar_resumen, preprocesar_texto_para_wordcloud
from modulos.visualizador import generar_nube_palabras, contar_palabras_frecuentes

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Asistente de Investigaci√≥n Digital",
    page_icon="üîç",
    layout="wide"
)

# T√≠tulo y descripci√≥n
st.title("üîç Asistente de Investigaci√≥n Digital")
st.markdown("""
Esta herramienta te ayuda a buscar informaci√≥n actualizada en la web sobre cualquier tema,
analiza el contenido utilizando modelos de lenguaje y presenta un resumen junto con visualizaciones interactivas.
""")

# Verificar las claves API
if not os.getenv("OPENAI_API_KEY") or not os.getenv("TAVILY_API_KEY"):
    st.error("""
    ‚ö†Ô∏è Se requieren claves API para el funcionamiento correcto.
    
    1. Copia el archivo `.env.example` a `.env`
    2. Agrega tus claves API:
       - OPENAI_API_KEY: Obt√©n una clave en [OpenAI](https://platform.openai.com)
       - TAVILY_API_KEY: Obt√©n una clave en [Tavily](https://tavily.com)
    """)
    st.stop()

# Formulario de b√∫squeda
with st.form("formulario_busqueda"):
    tema = st.text_input("Ingresa un tema de inter√©s:", placeholder="Ejemplo: Inteligencia artificial aplicada a la medicina")
    boton_buscar = st.form_submit_button("Buscar informaci√≥n")

# Procesar la b√∫squeda cuando se env√≠a el formulario
if boton_buscar and tema:
    # Crear contenedor para mostrar estado
    estado = st.empty()
    
    # Iniciar b√∫squeda
    estado.info("üîç Buscando informaci√≥n en la web...")
    try:
        resultados = realizar_busqueda(tema)
        
        if not resultados:
            st.warning("No se encontraron resultados para el tema especificado. Intenta con otro tema o reformula tu consulta.")
            st.stop()
        
        # Mostrar resultados en tabs
        st.subheader("Resultados de la b√∫squeda")
        
        # Crear pesta√±as para los diferentes resultados
        tabs = st.tabs([f"Resultado {i+1}" for i in range(len(resultados))])
        
        # Mostrar cada resultado en su pesta√±a correspondiente
        for i, (tab, resultado) in enumerate(zip(tabs, resultados)):
            with tab:
                st.markdown(f"### {resultado['titulo']}")
                st.markdown(f"**Fuente:** [{resultado['url']}]({resultado['url']})")
                st.markdown("**Extracto:**")
                st.markdown(resultado['contenido'][:500] + "...")
        
        # Obtener texto completo para an√°lisis
        texto_completo = obtener_texto_completo(resultados)
        
        # Generar resumen
        estado.info("üìù Generando resumen...")
        resumen = generar_resumen(texto_completo, tema)
        
        # Mostrar resumen
        st.subheader("Resumen")
        st.markdown(resumen)
        
        # Preparar texto para nube de palabras
        estado.info("üîÑ Procesando texto para visualizaci√≥n...")
        texto_procesado = preprocesar_texto_para_wordcloud(texto_completo)
        
        # Generar nube de palabras
        estado.info("üìä Generando visualizaci√≥n...")
        nube_palabras_img = generar_nube_palabras(texto_procesado)
        
        # Crear columnas para visualizaciones
        col1, col2 = st.columns(2)
        
        # Mostrar nube de palabras
        with col1:
            st.subheader("Nube de Palabras")
            st.markdown(f'<img src="data:image/png;base64,{nube_palabras_img}" alt="Nube de palabras" width="100%">', unsafe_allow_html=True)
        
        # Contar palabras frecuentes
        palabras_frecuentes = contar_palabras_frecuentes(texto_procesado, n=15)
        
        # Mostrar palabras frecuentes
        with col2:
            st.subheader("Palabras m√°s frecuentes")
            for palabra, frecuencia in palabras_frecuentes.items():
                st.write(f"- **{palabra}**: {frecuencia}")
        
        # Limpiar estado
        estado.success("‚úÖ An√°lisis completo")
        
    except Exception as e:
        estado.error(f"‚ùå Error durante la b√∫squeda: {str(e)}")
        st.exception(e)

# Informaci√≥n adicional
with st.expander("‚ÑπÔ∏è Acerca de esta aplicaci√≥n"):
    st.markdown("""
    **Asistente de Investigaci√≥n Digital** es una herramienta que integra:
    - B√∫squeda web con la API de Tavily
    - An√°lisis de texto con OpenAI a trav√©s de LangChain
    - Visualizaci√≥n de datos con WordCloud y Matplotlib
    - Interfaz interactiva con Streamlit
    
    El c√≥digo fuente est√° disponible en el repositorio del proyecto.
    """)

# Footer
st.markdown("---")
st.markdown("Desarrollado como proyecto educativo ‚Ä¢ 2025")